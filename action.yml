name: "Build and Push to Ryvn Registry"
description: "Builds and pushes Docker images or Helm charts to Ryvn Registry"

inputs:
  service_name:
    description: "Name of the service"
    required: true
  version:
    description: "Semantic version to tag the image/chart with"
    required: true
  build_only:
    description: "Build only, don't push to registry"
    required: false
    default: "false"
  ryvn_client_id:
    description: "Ryvn Client ID for authentication"
    required: true
  ryvn_client_secret:
    description: "Ryvn Client Secret for authentication"
    required: true
  build_args:
    description: "Build arguments to pass to the Docker build"
    required: false
  platforms:
    description: "List of target platforms for build"
    required: false
    default: "linux/amd64"
  use_nixpacks:
    description: "Use Nixpacks to build Docker images instead of Dockerfile"
    required: false
    default: "false"
  nixpacks_pkgs:
    description: "Additional Nix packages to install in the environment"
    required: false
    default: ""
  nixpacks_apt:
    description: "Additional Apt packages to install in the environment"
    required: false
    default: ""
  nixpacks_cache:
    description: "Use the Nixpacks build cache"
    required: false
    default: "true"

runs:
  using: "composite"
  steps:
    - name: Install Ryvn CLI
      uses: ryvn-technologies/install-ryvn-cli@v1.0.0

    - name: Print Runner Info
      shell: bash
      run: |
        echo "Runner name: ${{ runner.name }}"
        echo "Runner OS: ${{ runner.os }}"
        echo "Runner architecture: ${{ runner.arch }}"
        echo "Runner labels: ${{ runner.labels }}"

    - name: Get Service and Registry Details from Ryvn API
      id: service
      shell: bash
      env:
        RYVN_CLIENT_ID: ${{ inputs.ryvn_client_id }}
        RYVN_CLIENT_SECRET: ${{ inputs.ryvn_client_secret }}
      run: |
        # Get service details
        ryvn get service ${{ inputs.service_name }} -o json > service.json

        echo "Service details: $(cat service.json)"

        # Extract and validate service type
        service_type=$(jq -r '.definition.type' service.json)
        if [ "$service_type" = "null" ] || [ -z "$service_type" ]; then
          echo "Error: service type not found in service definition"
          exit 1
        fi

        # Extract and validate working directory
        working_dir=$(jq -r '.definition.build.workingDir' service.json)
        if ([ "$working_dir" = "null" ] || [ -z "$working_dir" ]) && ([ "$service_type" = "web-server.v1" ] || [ "$service_type" = "job.v1" ]); then
          echo "Error: working_dir not found in service definition"
          exit 1
        fi

        # Extract build command and buildpack for nixpacks first
        build_command=$(jq -r '.definition.build.command // ""' service.json)
        buildpack=$(jq -r '.definition.build.buildpack' service.json)

        # Extract and validate dockerfile path (only required if not using buildpack/nixpacks)
        dockerfile_path=$(jq -r '.definition.build.dockerfilePath' service.json)
        if ([ "$dockerfile_path" = "null" ] || [ -z "$dockerfile_path" ]) && ([ "$service_type" = "web-server.v1" ] || [ "$service_type" = "job.v1" ]) && [ "${{ inputs.use_nixpacks }}" != "true" ] && [ "$buildpack" != "nixpack" ]; then
          echo "Error: dockerfile_path not found in service definition"
          exit 1
        fi

        # Check if service should use nixpacks
        use_nixpacks_from_service="false"
        if [ "$buildpack" = "nixpack" ]; then
          use_nixpacks_from_service="true"
        fi

        # Check if dockerBuildArgs exists and is not null
        if [ "$(jq -r '.definition.build.dockerBuildArgs != null' service.json)" = "true" ]; then
          # Extract and convert build args to multi-line format
          service_build_args=$(jq -r '.definition.build.dockerBuildArgs | to_entries | map("\(.key)=\(.value)") | join("\n")' service.json)
          # If workflow build args are not specified, use service build args
          if [ -z "${{ inputs.build_args }}" ]; then
            echo "Using build args from service definition"
            echo "build_args<<EOF" >> $GITHUB_OUTPUT
            echo "$service_build_args" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "Using build args from workflow input"
            echo "build_args=${{ inputs.build_args }}" >> $GITHUB_OUTPUT
          fi
        else
          echo "build_args=${{ inputs.build_args }}" >> $GITHUB_OUTPUT
        fi

        # Extract and validate image name
        image_name=$(jq -r '.definition.imageName' service.json)
        if ([ "$image_name" = "null" ] || [ -z "$image_name" ]) && ([ "$service_type" = "web-server.v1" ] || [ "$service_type" = "job.v1" ]); then
          echo "Error: imageName not found in service definition"
          exit 1
        fi

        # Extract and validate helm chart path
        helm_chart_path=$(jq -r '.definition.build.chartPath' service.json)
        if ([ "$helm_chart_path" = "null" ] || [ -z "$helm_chart_path" ]) && [ "$service_type" = "helm-chart.v1" ]; then
          echo "Error: chartPath not found in service definition"
          exit 1
        fi

        # Extract chart name
        chart_name=$(jq -r '.definition.chartName' service.json)
        if ([ "$chart_name" = "null" ] || [ -z "$chart_name" ]) && [ "$service_type" = "helm-chart.v1" ]; then
          echo "Error: chartName not found in service definition"
          exit 1
        fi

        chart_repo=$(jq -r '.definition.chartRepository' service.json)
        if ([ "$chart_repo" = "null" ] || [ -z "$chart_repo" ]) && [ "$service_type" = "helm-chart.v1" ]; then
          echo "Error: chartRepository not found in service definition"
          exit 1
        fi

        # Extract and validate orgId
        org_id=$(jq -r '.orgId' service.json)
        if [ "$org_id" = "null" ] || [ -z "$org_id" ]; then
          echo "Error: orgId not found in service definition"
          exit 1
        fi

        # Set static registry values
        registry_url="703671917981.dkr.ecr.us-east-1.amazonaws.com"
        role_arn="arn:aws:iam::703671917981:role/${org_id}-github-actions"
        region="us-east-1"

        # Set outputs
        echo "service_type=$service_type" >> $GITHUB_OUTPUT
        echo "helm_chart_path=$helm_chart_path" >> $GITHUB_OUTPUT
        echo "chart_name=$chart_name" >> $GITHUB_OUTPUT
        echo "chart_repo=$chart_repo" >> $GITHUB_OUTPUT
        echo "working_dir=$working_dir" >> $GITHUB_OUTPUT
        echo "dockerfile_path=$dockerfile_path" >> $GITHUB_OUTPUT
        echo "registry_url=$registry_url" >> $GITHUB_OUTPUT
        echo "role_arn=$role_arn" >> $GITHUB_OUTPUT
        echo "region=$region" >> $GITHUB_OUTPUT
        echo "image_name=$image_name" >> $GITHUB_OUTPUT
        echo "build_command=$build_command" >> $GITHUB_OUTPUT
        echo "use_nixpacks_from_service=$use_nixpacks_from_service" >> $GITHUB_OUTPUT

    - name: Configure AWS credentials
      if: inputs.build_only != 'true'
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ steps.service.outputs.role_arn }}
        aws-region: ${{ steps.service.outputs.region }}

    - name: Login to Amazon ECR
      if: inputs.build_only != 'true'
      uses: aws-actions/amazon-ecr-login@v2

    # Docker Image Steps
    - name: Extract Docker metadata
      if: steps.service.outputs.service_type == 'web-server.v1' || steps.service.outputs.service_type == 'job.v1'
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ steps.service.outputs.registry_url }}/${{ steps.service.outputs.image_name }}
        tags: |
          type=semver,pattern={{version}},value=${{ inputs.version }}
          type=sha
          type=ref,event=pr

    # Nixpacks Build and Push (with build command)
    - name: Build and push with Nixpacks (with build command)
      if: (steps.service.outputs.service_type == 'web-server.v1' || steps.service.outputs.service_type == 'job.v1') && (inputs.use_nixpacks == 'true' || steps.service.outputs.use_nixpacks_from_service == 'true') && steps.service.outputs.build_command != ''
      uses: iloveitaly/github-action-nixpacks@main
      with:
        context: ${{ steps.service.outputs.working_dir }}
        push: ${{ inputs.build_only != 'true' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: ${{ inputs.platforms }}
        pkgs: ${{ inputs.nixpacks_pkgs }}
        apt: ${{ inputs.nixpacks_apt }}
        cache: ${{ inputs.nixpacks_cache }}
        cache_tag: ${{ steps.service.outputs.registry_url }}/${{ steps.service.outputs.image_name }}:cache
        env: NIXPACKS_BUILD_CMD="${{ steps.service.outputs.build_command }}"

    # Nixpacks Build and Push (without build command)
    - name: Build and push with Nixpacks (without build command)
      if: (steps.service.outputs.service_type == 'web-server.v1' || steps.service.outputs.service_type == 'job.v1') && (inputs.use_nixpacks == 'true' || steps.service.outputs.use_nixpacks_from_service == 'true') && steps.service.outputs.build_command == ''
      uses: iloveitaly/github-action-nixpacks@main
      with:
        context: ${{ steps.service.outputs.working_dir }}
        push: ${{ inputs.build_only != 'true' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: ${{ inputs.platforms }}
        pkgs: ${{ inputs.nixpacks_pkgs }}
        apt: ${{ inputs.nixpacks_apt }}
        cache: ${{ inputs.nixpacks_cache }}
        cache_tag: ${{ steps.service.outputs.registry_url }}/${{ steps.service.outputs.image_name }}:cache
        env: ${{ steps.service.outputs.build_args }}

    # Standard Docker Build Steps - only run if not using Nixpacks
    - name: Set up Docker Buildx
      if: (steps.service.outputs.service_type == 'web-server.v1' || steps.service.outputs.service_type == 'job.v1') && inputs.use_nixpacks != 'true' && steps.service.outputs.use_nixpacks_from_service != 'true'
      uses: docker/setup-buildx-action@v3
      with:
        version: latest

    - name: Build and push Docker image (Blacksmith)
      if: (steps.service.outputs.service_type == 'web-server.v1' || steps.service.outputs.service_type == 'job.v1') && startsWith(runner.name, 'blacksmith') && inputs.use_nixpacks != 'true' && steps.service.outputs.use_nixpacks_from_service != 'true'
      uses: useblacksmith/build-push-action@v1
      with:
        context: ${{ steps.service.outputs.working_dir }}
        file: ${{ steps.service.outputs.dockerfile_path }}
        push: ${{ inputs.build_only != 'true' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: ${{ steps.service.outputs.build_args }}
        platforms: ${{ inputs.platforms }}

    - name: Build and push Docker image (Docker)
      if: (steps.service.outputs.service_type == 'web-server.v1' || steps.service.outputs.service_type == 'job.v1') && !startsWith(runner.name, 'blacksmith') && inputs.use_nixpacks != 'true' && steps.service.outputs.use_nixpacks_from_service != 'true'
      uses: docker/build-push-action@v5
      with:
        context: ${{ steps.service.outputs.working_dir }}
        file: ${{ steps.service.outputs.dockerfile_path }}
        push: ${{ inputs.build_only != 'true' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: ${{ steps.service.outputs.build_args }}
        cache-from: type=gha,scope=${{ inputs.service_name }}
        cache-to: type=gha,mode=max,scope=${{ inputs.service_name }}
        platforms: ${{ inputs.platforms }}

    # Helm Chart Steps
    - name: Install Helm
      if: steps.service.outputs.service_type == 'helm-chart.v1'
      uses: azure/setup-helm@v3
      with:
        version: v3.12.1

    - name: Package Helm Chart
      if: steps.service.outputs.service_type == 'helm-chart.v1'
      shell: bash
      run: |
        helm package ${{ steps.service.outputs.helm_chart_path }} --version ${{ inputs.version }}

    - name: Login to Helm Registry
      if: steps.service.outputs.service_type == 'helm-chart.v1' && inputs.build_only != 'true'
      shell: bash
      run: |
        aws ecr get-login-password --region ${{ steps.service.outputs.region }} | helm registry login --username AWS --password-stdin ${{ steps.service.outputs.registry_url }}

    - name: Push Helm Chart to Registry
      if: steps.service.outputs.service_type == 'helm-chart.v1' && inputs.build_only != 'true'
      shell: bash
      run: |
        helm push ${{ steps.service.outputs.chart_name }}-${{ inputs.version }}.tgz oci://${{ steps.service.outputs.registry_url }}/${{ steps.service.outputs.chart_repo }}

branding:
  icon: "package"
  color: "blue"
