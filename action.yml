name: "Build and Push Image to Ryvn Registry"
description: "Builds a Docker image and pushes it to Ryvn Registry"

inputs:
  service_name:
    description: "Name of the service"
    required: true

runs:
  using: "composite"
  steps:
    - name: Install Ryvn CLI
      uses: ryvn-technologies/install-ryvn-cli@v1.0.0

    - name: Get Service and Registry Details from Ryvn API
      id: service
      shell: bash
      env:
        RYVN_CLIENT_ID: ${{ secrets.RYVN_CLIENT_ID }}
        RYVN_CLIENT_SECRET: ${{ secrets.RYVN_CLIENT_SECRET }}
      run: |
        # Get service details
        ryvn get service ${{ inputs.service_name }} -o json > service.json

        echo "Service details: $(cat service.json)"

        # Extract and validate working directory
        working_dir=$(jq -r '.definition.build.workingDir' service.json)
        if [ "$working_dir" = "null" ] || [ -z "$working_dir" ]; then
          echo "Error: working_dir not found in service definition"
          exit 1
        fi

        # Extract and validate dockerfile path
        dockerfile_path=$(jq -r '.definition.build.dockerfilePath' service.json)
        if [ "$dockerfile_path" = "null" ] || [ -z "$dockerfile_path" ]; then
          echo "Error: dockerfile_path not found in service definition"
          exit 1
        fi

        # Extract and validate image name
        image_name=$(jq -r '.definition.imageName' service.json)
        if [ "$image_name" = "null" ] || [ -z "$image_name" ]; then
          echo "Error: imageName not found in service definition"
          exit 1
        fi

        # Get registry details
        ryvn get registry ryvn-registry -o json > registry.json

        # Extract and validate registry details
        role_arn=$(jq -r '.definition.assumeRoleArn' registry.json)
        if [ "$role_arn" = "null" ] || [ -z "$role_arn" ]; then
          echo "Error: assumeRoleArn not found in registry definition"
          exit 1
        fi

        region=$(jq -r '.definition.region' registry.json)
        if [ "$region" = "null" ] || [ -z "$region" ]; then
          echo "Error: region not found in registry definition"
          exit 1
        fi

        registry_url=$(jq -r '.definition.url' registry.json)
        if [ "$registry_url" = "null" ] || [ -z "$registry_url" ]; then
          echo "Error: registry URL not found in registry definition"
          exit 1
        fi

        # Set outputs
        echo "working_dir=$working_dir" >> $GITHUB_OUTPUT
        echo "dockerfile_path=$dockerfile_path" >> $GITHUB_OUTPUT
        echo "registry_url=$registry_url" >> $GITHUB_OUTPUT
        echo "role_arn=$role_arn" >> $GITHUB_OUTPUT
        echo "region=$region" >> $GITHUB_OUTPUT
        echo "image_name=$image_name" >> $GITHUB_OUTPUT

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ steps.service.outputs.role_arn }}
        aws-region: ${{ steps.service.outputs.region }}

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Extract Docker metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ steps.service.outputs.registry_url }}/${{ steps.service.outputs.image_name }}
        tags: |
          type=ref,event=pr
          type=sha
          type=raw,value=latest

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ${{ steps.service.outputs.working_dir }}
        file: ${{ steps.service.outputs.dockerfile_path }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

branding:
  icon: "package"
  color: "blue"
